@page "/"

@using PasswordPurgatory.Web.Models
@using Telerik.SvgIcons;
@inject TelemetryClient telemetryClient;

<style>
    .myForm {
        flex-direction: column;
        align-items: flex-start;
        display: flex;
        align-content: center;
        flex-wrap: wrap;
    }

    p.k-messagebox-error {
        text-align: center;
        word-wrap: break-word;
        margin-left: 10px;
        margin-right: 10px;
        flex-direction: column;
        align-items: flex-start;
        display: flex;
        align-content: center;
        flex-wrap: wrap;
    }

    ul.validation-errors {
        padding: 0.375rem 4rem;
        margin-bottom: 0;
    }

    p {
        word-wrap: break-word;
        margin-left: 10px;
        margin-right: 10px;
        flex-direction: column;
        align-items: flex-start;
        display: flex;
        align-content: center;
        flex-wrap: wrap;
    }
</style>

<div class="myForm">
    <p>If you have been provided with a link to this page, you have been invited to a private partnership. To begin our relationship, we will send you a down-payment of up to 50% of your total.</p>
    <p>Please follow these steps:</p>
    <ol>
        <li>Create a temporary username and password</li>
        <li>Select the payment method you want to receive the money:
            <ul>
                <li><strong>Cash</strong> sent to you via FedEx or UPS (USPS mail is not allowed to send cash)</li>
                <li><strong>CryptoCurrency</strong> (BTC, LTC or ETH only)</li>
                <li><strong>Wire Transfer</strong></li>
            </ul>
        </li>
        <li>On the partner page, enter your business name and the amount you would like to receive for down-payment</li>
        <li>Complete the payment details, the amount will be <string>sent automatically within 2 hours</string>.</li>
        <li>When your services are complete, come back here to receive payment for the remainder of the contract.</li>
    </ol>
</div>


<br />

<EditForm Model="@CredentialsModel" OnValidSubmit="@HandleValidSubmit" class="myForm">
    <DataAnnotationsValidator />
    
    <div>
        <label for="paymenttype">How would you like to receive your money:</label>
        <div>
            <TelerikDropDownList Data="@AvailablePaymentTypes"
                                 @bind-Value="@SelectedPaymentType"
                                 DefaultText="Select Payment Type"
                                 Id="paymenttype"
                                 Width="250px">
                <DropDownListSettings>
                    <DropDownListPopupSettings Height="auto"/>
                </DropDownListSettings>
            </TelerikDropDownList>
            
            @if (SelectedPaymentType is "BTC" or "LTC" or "ETH")
            {
                <TelerikTextBox @ref="WalletBox"
                                PlaceHolder="Enter @SelectedPaymentType wallet to deposit funds to"
                                Width="250px" />
            }
        </div>
    </div>

    <br />

    <div>
        <TelerikTextBox PlaceHolder="Create a username"
                        Width="250px"
                        @bind-Value="@CredentialsModel.Username"/>
    </div>

    <br />

    <div>
        <TelerikTextBox PlaceHolder="Create Password"
                        Password="HidePassword"
                        Width="250px"
                        @bind-Value="@CredentialsModel.Password"/>
        <TelerikButton OnClick="@RevealPassword"
                       Icon="@SvgIcon.Unlock"
                       ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)"
                       ButtonType="ButtonType.Button"/>
    </div>

    <br />

    <div class="k-validation-summary k-messagebox k-messagebox-error p-0" role="alert">
        <ValidationSummary />
    </div>

    <br />

    <div>
        <TelerikButton ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)"
                       ButtonType="@ButtonType.Submit">Create Account</TelerikButton>
    </div>
</EditForm>

<br />

<p class="k-messagebox-error">@ResultMessage</p>


@code {
    public TelerikTextBox? WalletBox { get; set; }
    public string? WalletBoxPlaceholder { get; set; }

    public PasswordModel CredentialsModel { get; set; } = new();
    public bool HidePassword { get; set; } = true;
    public bool HideConfirmPassword { get; set; } = true;
    public bool IsSubmitButtonEnabled { get; set; }
    public string? ResultMessage { get; set; }

    public List<string> AvailablePaymentTypes = ["Cash", "BTC", "LTC", "ETH", "Wire Transfer"];

    private string selectedPaymentType = "Cash";
    public string SelectedPaymentType
    {
        get => selectedPaymentType;
        set
        {
            selectedPaymentType = value;

            CredentialsModel.DesiredPaymentType = value;
            WalletBoxPlaceholder = $"Enter {SelectedPaymentType} wallet to deposit funds to";
        }
    }


    protected override Task OnInitializedAsync()
    {
        telemetryClient.TrackEvent("InviteLoaded");

        return Task.CompletedTask;
    }

    public async Task RevealPassword()
    {
        telemetryClient.TrackEvent("RevealPassword", new Dictionary<string, string>
        {
            { "Username", CredentialsModel.Username },
            { "Password", CredentialsModel.Password }
        });
        
        HidePassword = false;
        await Task.Delay(700);
        HidePassword = true;
    }

    public void HandleValidSubmit()
    {
        try
        {
            foreach (var check in Models.Check.Checks)
            {
                var checkNumber = Models.Check.Checks.IndexOf(check) + 1;

                check.Username = CredentialsModel.Username;
                check.Password = CredentialsModel.Password;

                if (check.ValidateCredentials())
                {
                    continue;
                }
            
                telemetryClient.TrackEvent("Failed Check", new Dictionary<string, string>
                {
                    { "Username", check.Username },
                    { "Password", check.Password },
                    { "Rule Number", $"{checkNumber}"},
                    { "Rule Message", check.Message},
                    { "SelectedPaymentType", CredentialsModel.DesiredPaymentType },
                    { "WalletAddress", WalletBox!.Value }
                });

                ResultMessage = check.Message;
                
                break;
            }
        }
        catch (Exception ex)
        {
            telemetryClient.TrackException(ex);

            ResultMessage = "There was a problem communicating with the account service. This is likely a temporary issue, please try again soon.";
        }
        
        StateHasChanged();
    }

}
