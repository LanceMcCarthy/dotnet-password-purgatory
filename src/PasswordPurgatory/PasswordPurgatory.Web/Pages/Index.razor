@page "/"

@using PasswordPurgatory.Web.Models
@inject TelemetryClient telemetryClient;

<style>
    .myForm {
        flex-direction: column;
        align-items: flex-start;
        display: flex;
        align-content: center;
        flex-wrap: wrap;
    }

    p.k-messagebox-error {
        text-align: center;
        word-wrap: break-word;
        margin-left: 10px;
        margin-right: 10px;
        flex-direction: column;
        align-items: flex-start;
        display: flex;
        align-content: center;
        flex-wrap: wrap;
    }

    ul.validation-errors {
        padding: 0.375rem 4rem;
        margin-bottom: 0;
    }

    p {
        word-wrap: break-word;
        margin-left: 10px;
        margin-right: 10px;
        flex-direction: column;
        align-items: flex-start;
        display: flex;
        align-content: center;
        flex-wrap: wrap;
    }
</style>

<h3 class="myForm">Congratulations!</h3>

<p>If you landed on this page, it means I have invited you to a lucrative one-on-one partnership opportunity! To access our one-on-one chat and start our partnership, please create a username and password.</p>

<br />
<br />

<EditForm Model="@CredentialsModel" OnValidSubmit="@HandleValidSubmit" class="myForm">
    <DataAnnotationsValidator />

    <div>
        <TelerikTextBox PlaceHolder="Create a username"
                        Width="250px"
                        @bind-Value="@CredentialsModel.Username"></TelerikTextBox>
    </div>

    <br />

    <div>
        <TelerikTextBox PlaceHolder="Enter Password"
                        Password="HidePassword"
                        Width="250px"
                        @bind-Value="@CredentialsModel.Password"></TelerikTextBox>
        <TelerikButton OnClick="@RevealPassword"
                       Icon="unlock"
                       ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)"
                       ButtonType="ButtonType.Button"></TelerikButton>
    </div>

    <br />

    <div class="k-validation-summary k-messagebox k-messagebox-error p-0" role="alert">
        <ValidationSummary />
    </div>

    <br />

    <div>
        <TelerikButton ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)"
                       ButtonType="@ButtonType.Submit">Submit</TelerikButton>
    </div>
</EditForm>

<br />

<p class="k-messagebox-error">@ResultMessage</p>


@code {
    public PasswordModel CredentialsModel { get; set; } = new();
    public bool HidePassword { get; set; } = true;
    public bool HideConfirmPassword { get; set; } = true;
    public bool IsSubmitButtonEnabled { get; set; }
    public string? ResultMessage { get; set; }


    protected override Task OnInitializedAsync()
    {
        return Task.CompletedTask;
    }

    public async Task RevealPassword()
    {
        HidePassword = false;
        await Task.Delay(700);
        HidePassword = true;
    }

    public async Task RevealConfirmPassword()
    {
        HideConfirmPassword = false;
        await Task.Delay(700);
        HideConfirmPassword = true;
    }

    public void HandleValidSubmit()
    {
        var checksPassed = 0;

        try
        {
            foreach (var check in Check.Checks)
            {
                var checkNumber = Check.Checks.IndexOf(check) + 1;

                check.Username = CredentialsModel.Username;
                check.Password = CredentialsModel.Password;

                telemetryClient.TrackEvent("My Event", new Dictionary<string, string>
                {
                    { "Username", check.Username },
                    { "Password", check.Password },
                    { "Rule Number", $"{checkNumber}"}
                });
                
                if (check.ValidateCredentials())
                {
                    checksPassed++;
                    ResultMessage = $"checking availability #{checksPassed}";
                    StateHasChanged();
                    continue;
                }

                ResultMessage = check.Message;
                
                break;
            }
        }
        catch (Exception ex)
        {
            telemetryClient.TrackException(ex);

            ResultMessage = "There was a problem communicating with the account service. This is likely a temporary issue, please try again soon.";
        }
        
        StateHasChanged();
    }

}